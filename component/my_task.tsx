import { Avatar, Badge, Box, Button, Grid, Group, Modal, Paper, SimpleGrid, Stack, Switch, Text, TextInput, Title } from '@mantine/core';
import { useForm } from '@mantine/form';
import { useDisclosure, useShallowEffect } from '@mantine/hooks';
import { IconUser } from '@tabler/icons';
import { Gantt, Task, ViewMode } from 'gantt-task-react';
// import "gantt-task-react/dist/index.css";
import Head from 'next/head';
import { useState } from 'react';
import ProjectProps from '../models/model_project';
import MyTaskProps from '../models/my_task_props';
import { getStartEndDateForProject } from '../util/helper';
import AddTask from './add_task';

export default function MyTask({ mainProject }: MyTaskProps) {

  const [tasks, setTasks] = useState<Task[]>([])
  const [view, setView] = useState<ViewMode>(ViewMode.Day)
  const [isChecked, setIsChecked] = useState(false)
  const [openEdit, handleEdit] = useDisclosure(false)
  const formSingleTask = useForm<Task>();

  const listData: ProjectProps["Task"] = []

  const form = useForm({
    initialValues: {
      task: listData
    }
  })

  let columnWidth = 65;

  useShallowEffect(() => {

    if (view === ViewMode.Year) {
      columnWidth = 350;
    } else if (view === ViewMode.Month) {
      columnWidth = 300;
    } else if (view === ViewMode.Week) {
      columnWidth = 250;
    }


  }, [])

  useShallowEffect(() => {
    let dataTask = [...mainProject.Task]
    for (let itm of dataTask) {

      itm.start = new Date(itm.start)
      itm.end = new Date(itm.end)
    }

    setTasks([...dataTask as any])


  }, [])

  const handleTaskChange = (task: Task) => {
    console.log("On date change Id:" + task.id);

    let newTasks = tasks.map(t => (t.id === task.id ? task : t));
    if (task.project) {
      const [start, end] = getStartEndDateForProject(newTasks, task.project);
      const project = newTasks[newTasks.findIndex(t => t.id === task.project)];
      if (
        project.start.getTime() !== start.getTime() ||
        project.end.getTime() !== end.getTime()
      ) {
        const changedProject = { ...project, start, end };
        newTasks = newTasks.map(t =>
          t.id === task.project ? changedProject : t
        );
      }
    }
    setTasks(newTasks);
  };

  const handleTaskDelete = (task: Task) => {
    const conf = window.confirm("Are you sure about " + task.name + " ?");
    if (conf) {
      setTasks(tasks.filter(t => t.id !== task.id));
    }
    return conf;
  };

  const handleProgressChange = async (task: Task) => {
    setTasks(tasks.map(t => (t.id === task.id ? task : t)));
    console.log("On progress change Id:" + task.id);
  };

  const handleDblClick = (task: Task) => {
    // alert("On Double Click event Id:" + task.id);
    form.setFieldValue("task", mainProject.Task)

    formSingleTask.setValues(task)
    handleEdit.open()
  };

  const handleClick = (task: Task) => {
    // console.log("On Click event Id:" + task.id);

  };

  const handleSelect = (task: Task, isSelected: boolean) => {
    console.log(task.name + " has " + (isSelected ? "selected" : "unselected"));
  };

  const handleExpanderClick = (task: Task) => {
    setTasks(tasks.map(t => (t.id === task.id ? task : t)));
    console.log("On expander click Id:" + task.id);
  };


  return (
    <>
      <Modal title={"Edit"} opened={openEdit} onClose={handleEdit.close}>
        <Stack>
          <TextInput label={"title"} value={formSingleTask.values.name} {...formSingleTask.getInputProps("name")} />
          {/* <MultiSelect data={ } /> */}
          <Group position='right'>
            <Button variant='white'>Cansel</Button>
            <Button variant='white' c={"orange"}>Update</Button>
            <Button variant='white' c={"red"}>Delete</Button>
          </Group>
        </Stack>
      </Modal>

      <Box>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>



        {/* <ViewSwitcher
          onViewModeChange={viewMode => setView(viewMode)}
          onViewListChange={setIsChecked}
          isChecked={isChecked}
        /> */}

        <Box p={"xs"}>
          <Title>{mainProject.name}</Title>
        </Box>
        <Paper withBorder>
          <Grid p={"xs"}>
            <Grid.Col sm={1} md={2}>
              <Box>
                {mainProject.UserProject.map(el => <Group key={el.User.id} p={"xs"}   >
                  <Avatar radius={"xl"} >
                    <IconUser />
                  </Avatar>
                  <Text>{el.User.name}</Text>
                </Group>)}
              </Box>
            </Grid.Col>
            <Grid.Col sm={1} md={10}>
              <Stack >
                <Group bg={"gray.1"}>
                  <AddTask dependencies={[]} projectId={mainProject.id} listTask={mainProject.Task as any} />
                  <Switch checked={isChecked} onChange={() => setIsChecked(!isChecked)} label={isChecked ? "Hide Detail" : "Show Detail"} />
                </Group>
                {tasks.length > 0 && <Gantt tasks={tasks}
                  viewMode={view}
                  onDateChange={handleTaskChange}
                  onDelete={handleTaskDelete}
                  onProgressChange={handleProgressChange}
                  onDoubleClick={handleDblClick}
                  onClick={handleClick}
                  onSelect={handleSelect}
                  onExpanderClick={handleExpanderClick}
                  listCellWidth={isChecked ? "155px" : ""}
                  columnWidth={columnWidth} />}
              </Stack>
            </Grid.Col>
          </Grid>
        </Paper>
      </Box>
    </>
  )
}
